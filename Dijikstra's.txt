import java.util.Arrays;

public class LSR{
    private final int maxi = Integer.MAX_VALUE;
    private int[][] graph;
    private int numVertices;

    public LSR(int numVertices){
        this.numVertices=numVertices;
        this.graph = new int[numVertices][numVertices];
    }
    public void addEdge(int u,int v,int weight){
        graph[u][v]=weight;
        graph[v][u]=weight;
    }
    public int minDist(int[] dist,boolean[] visited){
        int minDist= maxi;
        int minIndex=-1;

        for(int i=0;i<numVertices;i++){
            if(!visited[i] && dist[i]<minDist){
                minDist=dist[i];
                minIndex=i;
            }
        }
        return minIndex;
    }
    public void disjktra(int src){
        boolean[] visited = new boolean[numVertices];
        int[] dist = new int[numVertices];
        Arrays.fill(dist,maxi);

        dist[src]=0;
        for(int i=0;i<numVertices-1;i++){
            int u = minDist(dist, visited);
            visited[u]=true;
            for(int j=0;j<numVertices;j++){
                if(!visited[j] && graph[u][j]!=0 && dist[u] != maxi && dist[u] + graph[u][j] <dist[j]){
                    dist[j] = dist[u] + graph[u][j];
                }
            }
        }
        disp(dist);

    }
    private void disp(int[] dist){
        System.out.println("Vertex: \tDistance from Source");
        for(int i=0;i<dist.length;i++){
            System.out.println(i + "\t\t" + dist[i]);
        }
    }
    public static void main(String[] args) {
        LSR  lsr= new LSR(6);

        lsr.addEdge(0, 1, 2);
        lsr.addEdge(1, 2, 5);
        lsr.addEdge(1, 3, 1);
        lsr.addEdge(2, 4, 3);
        lsr.addEdge(3, 4, 2);
        lsr.addEdge(3, 5, 5);
        lsr.addEdge(4, 5, 1);

        lsr.disjktra(0);
    }
}